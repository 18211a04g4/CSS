Java Date and Time
Java is used for displaying the local date and time on the output screen
The default format of displaying the time is YYYY-MM-DD-hh-mm-ss-zzz
The different factors in displaying the date and time are the year, month, day, hours, minutes, seconds and finally, nanoseconds
Introduction to Java Time
	- ISO 8601 Core Calendar – java.time
-It describes about LocalTime, LocalDate, LocalDateTime, ZonedDateTime, ..and also Clock, Instant, Duration, Period, ZoneId, Month, DayOfWeek,
	- Parsing and Formatting – java.time.format
-It gives the information about DateTimeFormat, DateTimeFormatBuilder, standard formats, patterns, styles, ...
	- TimeZone – java.time.zone
		-It gives the information about ZoneRules, transitions, etc.
Improved Date and Time has some new features they are:
• It is Fluent, Immutable, Thread Safe, Easy to use
• Strong typing with fit for purpose types
• Easy to use formatting and parsing
• Extensible with Units, Fields, and Chronologies
• Interoperable with java.util.Calendar
• Supports Regional Calendars
• The essential ISO Calendar for global business
Calendar Neutral API
- common assumptions for the calender neutral API’s
– Don't assume the number of months of year
– Use the API to do all calendar arithmetic. Plus/minus days, months, years
– Do not assume particular numbers of days-per-month or months-per-year
– Don't assume that the week starts on Monday (ISO), use WeekFields.
– Don't assume the month numbers are bound to specific months, use
DateTimeFormatter 
Converting from Joda-Time
 Mapping of class names
– LocalDate, LocalTime, LocalDateTime are the same– Joda-Time DateTime is java.time.ZonedDateTime
– Joda-Time DateTimeZone maps to java.time.ZoneId/ZoneRules/ZoneOffset
Period and Duration
– Joda-Time Period is years to seconds; Java.time.Period is simpler, only ISO date-based
– Joda-Time Duration is same as java.time.Duration
Java time is more open and flexible
– Adjusters and queries are new
– Ability to define own fields and units is essentially new
– Adding calendar systems is simple rather than very hard

Implementation
import java.util.*;
import java.text.*;

public class Test
{
   public static void main(String args[])
   {
      Date dNow = new Date( );
      
      SimpleDateFormat ft1 = new SimpleDateFormat ("dd/MM/yyyy");
      SimpleDateFormat ft2 = new SimpleDateFormat("E");
      SimpleDateFormat ft3 = new SimpleDateFormat("hh:mm:ss a");
      
      System.out.println("The Current Date is " + ft1.format(dNow));
      System.out.println("Today is " + ft2.format(dNow));
      System.out.println("The Current Time is " + ft3.format(dNow));
   }
}
	
Regular Expressions in Java
It is a kind of a pattern and that can be applied for text
It can be matched with the text or cannot be matched
	If a regular expression matches a part of the text, then you can easily find
out which part
If a regular expression is complex, then you can easily find out which parts
of the regular expression match which parts of the text
With this information, you can readily extract parts of the text, or do
substitutions in the text
This is a helpful tool in manipulating the text and used in the automatic generation of Web pages
Perl and java
The Perl programming language is heavily used in server-side programming, because
Much server-side programming is text manipulation
Java’s regular expressions are almost identical to those of Perl
	These patterns match the empty string if at the specified position:
	
These patterns match the empty string if at the specified position:

Quantifiers
Quantifier is a concept that allows the programmer to specify the number of occurrences of a specific type of value in the regular expression
They are of different kind
	1.greedy quantifier-
It’s a quantifier in which, it matches as much as it can, and back off if it needs to
	2. Reluctant quantifier-
 		It’s a quantifier in which,it matches as little as possible, then take more if it needs to
	3. Reluctant quantifier-
Its also a quantifier in which it will match as little as possible, then take more if it needs to
Capturing groups in Java
-If m is a matcher that has just performed a successful match, then
m.group(n) returns the String matched by capturing group n
          -This could be an empty string
          - m.group() returns the String matched by the entire pattern
           IllegalStateException will be thrown if m did not match





